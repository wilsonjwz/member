// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user/internal/data/ent/userextend"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserExtendCreate is the builder for creating a UserExtend entity.
type UserExtendCreate struct {
	config
	mutation *UserExtendMutation
	hooks    []Hook
}

// SetPlatUserID sets the "plat_user_id" field.
func (uec *UserExtendCreate) SetPlatUserID(u uint) *UserExtendCreate {
	uec.mutation.SetPlatUserID(u)
	return uec
}

// SetRealName sets the "real_name" field.
func (uec *UserExtendCreate) SetRealName(s string) *UserExtendCreate {
	uec.mutation.SetRealName(s)
	return uec
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableRealName(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetRealName(*s)
	}
	return uec
}

// SetIDNumber sets the "id_number" field.
func (uec *UserExtendCreate) SetIDNumber(s string) *UserExtendCreate {
	uec.mutation.SetIDNumber(s)
	return uec
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableIDNumber(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetIDNumber(*s)
	}
	return uec
}

// SetAge sets the "age" field.
func (uec *UserExtendCreate) SetAge(i int8) *UserExtendCreate {
	uec.mutation.SetAge(i)
	return uec
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableAge(i *int8) *UserExtendCreate {
	if i != nil {
		uec.SetAge(*i)
	}
	return uec
}

// SetSex sets the "sex" field.
func (uec *UserExtendCreate) SetSex(i int8) *UserExtendCreate {
	uec.mutation.SetSex(i)
	return uec
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableSex(i *int8) *UserExtendCreate {
	if i != nil {
		uec.SetSex(*i)
	}
	return uec
}

// SetBirth sets the "birth" field.
func (uec *UserExtendCreate) SetBirth(i int) *UserExtendCreate {
	uec.mutation.SetBirth(i)
	return uec
}

// SetNillableBirth sets the "birth" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableBirth(i *int) *UserExtendCreate {
	if i != nil {
		uec.SetBirth(*i)
	}
	return uec
}

// SetIcon sets the "icon" field.
func (uec *UserExtendCreate) SetIcon(s string) *UserExtendCreate {
	uec.mutation.SetIcon(s)
	return uec
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableIcon(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetIcon(*s)
	}
	return uec
}

// SetNickName sets the "nick_name" field.
func (uec *UserExtendCreate) SetNickName(s string) *UserExtendCreate {
	uec.mutation.SetNickName(s)
	return uec
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableNickName(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetNickName(*s)
	}
	return uec
}

// SetImei sets the "imei" field.
func (uec *UserExtendCreate) SetImei(s string) *UserExtendCreate {
	uec.mutation.SetImei(s)
	return uec
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableImei(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetImei(*s)
	}
	return uec
}

// SetOaid sets the "oaid" field.
func (uec *UserExtendCreate) SetOaid(s string) *UserExtendCreate {
	uec.mutation.SetOaid(s)
	return uec
}

// SetNillableOaid sets the "oaid" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableOaid(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetOaid(*s)
	}
	return uec
}

// SetDeviceID sets the "device_id" field.
func (uec *UserExtendCreate) SetDeviceID(s string) *UserExtendCreate {
	uec.mutation.SetDeviceID(s)
	return uec
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableDeviceID(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetDeviceID(*s)
	}
	return uec
}

// SetSystemName sets the "system_name" field.
func (uec *UserExtendCreate) SetSystemName(s string) *UserExtendCreate {
	uec.mutation.SetSystemName(s)
	return uec
}

// SetNillableSystemName sets the "system_name" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableSystemName(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetSystemName(*s)
	}
	return uec
}

// SetSystemVersion sets the "system_version" field.
func (uec *UserExtendCreate) SetSystemVersion(s string) *UserExtendCreate {
	uec.mutation.SetSystemVersion(s)
	return uec
}

// SetNillableSystemVersion sets the "system_version" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableSystemVersion(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetSystemVersion(*s)
	}
	return uec
}

// SetAdid sets the "adid" field.
func (uec *UserExtendCreate) SetAdid(s string) *UserExtendCreate {
	uec.mutation.SetAdid(s)
	return uec
}

// SetNillableAdid sets the "adid" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableAdid(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetAdid(*s)
	}
	return uec
}

// SetGameID sets the "game_id" field.
func (uec *UserExtendCreate) SetGameID(s string) *UserExtendCreate {
	uec.mutation.SetGameID(s)
	return uec
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableGameID(s *string) *UserExtendCreate {
	if s != nil {
		uec.SetGameID(*s)
	}
	return uec
}

// SetThirdPlatformID sets the "third_platform_id" field.
func (uec *UserExtendCreate) SetThirdPlatformID(i int8) *UserExtendCreate {
	uec.mutation.SetThirdPlatformID(i)
	return uec
}

// SetNillableThirdPlatformID sets the "third_platform_id" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableThirdPlatformID(i *int8) *UserExtendCreate {
	if i != nil {
		uec.SetThirdPlatformID(*i)
	}
	return uec
}

// SetCreatedAt sets the "created_at" field.
func (uec *UserExtendCreate) SetCreatedAt(t time.Time) *UserExtendCreate {
	uec.mutation.SetCreatedAt(t)
	return uec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uec *UserExtendCreate) SetNillableCreatedAt(t *time.Time) *UserExtendCreate {
	if t != nil {
		uec.SetCreatedAt(*t)
	}
	return uec
}

// SetUpdatedAt sets the "updated_at" field.
func (uec *UserExtendCreate) SetUpdatedAt(t time.Time) *UserExtendCreate {
	uec.mutation.SetUpdatedAt(t)
	return uec
}

// Mutation returns the UserExtendMutation object of the builder.
func (uec *UserExtendCreate) Mutation() *UserExtendMutation {
	return uec.mutation
}

// Save creates the UserExtend in the database.
func (uec *UserExtendCreate) Save(ctx context.Context) (*UserExtend, error) {
	var (
		err  error
		node *UserExtend
	)
	uec.defaults()
	if len(uec.hooks) == 0 {
		if err = uec.check(); err != nil {
			return nil, err
		}
		node, err = uec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserExtendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uec.check(); err != nil {
				return nil, err
			}
			uec.mutation = mutation
			node, err = uec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uec.hooks) - 1; i >= 0; i-- {
			mut = uec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UserExtendCreate) SaveX(ctx context.Context) *UserExtend {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (uec *UserExtendCreate) defaults() {
	if _, ok := uec.mutation.RealName(); !ok {
		v := userextend.DefaultRealName
		uec.mutation.SetRealName(v)
	}
	if _, ok := uec.mutation.IDNumber(); !ok {
		v := userextend.DefaultIDNumber
		uec.mutation.SetIDNumber(v)
	}
	if _, ok := uec.mutation.Age(); !ok {
		v := userextend.DefaultAge
		uec.mutation.SetAge(v)
	}
	if _, ok := uec.mutation.Sex(); !ok {
		v := userextend.DefaultSex
		uec.mutation.SetSex(v)
	}
	if _, ok := uec.mutation.Birth(); !ok {
		v := userextend.DefaultBirth
		uec.mutation.SetBirth(v)
	}
	if _, ok := uec.mutation.Icon(); !ok {
		v := userextend.DefaultIcon
		uec.mutation.SetIcon(v)
	}
	if _, ok := uec.mutation.NickName(); !ok {
		v := userextend.DefaultNickName
		uec.mutation.SetNickName(v)
	}
	if _, ok := uec.mutation.Imei(); !ok {
		v := userextend.DefaultImei
		uec.mutation.SetImei(v)
	}
	if _, ok := uec.mutation.Oaid(); !ok {
		v := userextend.DefaultOaid
		uec.mutation.SetOaid(v)
	}
	if _, ok := uec.mutation.DeviceID(); !ok {
		v := userextend.DefaultDeviceID
		uec.mutation.SetDeviceID(v)
	}
	if _, ok := uec.mutation.SystemName(); !ok {
		v := userextend.DefaultSystemName
		uec.mutation.SetSystemName(v)
	}
	if _, ok := uec.mutation.SystemVersion(); !ok {
		v := userextend.DefaultSystemVersion
		uec.mutation.SetSystemVersion(v)
	}
	if _, ok := uec.mutation.Adid(); !ok {
		v := userextend.DefaultAdid
		uec.mutation.SetAdid(v)
	}
	if _, ok := uec.mutation.GameID(); !ok {
		v := userextend.DefaultGameID
		uec.mutation.SetGameID(v)
	}
	if _, ok := uec.mutation.ThirdPlatformID(); !ok {
		v := userextend.DefaultThirdPlatformID
		uec.mutation.SetThirdPlatformID(v)
	}
	if _, ok := uec.mutation.CreatedAt(); !ok {
		v := userextend.DefaultCreatedAt()
		uec.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uec *UserExtendCreate) check() error {
	if _, ok := uec.mutation.PlatUserID(); !ok {
		return &ValidationError{Name: "plat_user_id", err: errors.New("ent: missing required field \"plat_user_id\"")}
	}
	if _, ok := uec.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New("ent: missing required field \"real_name\"")}
	}
	if _, ok := uec.mutation.IDNumber(); !ok {
		return &ValidationError{Name: "id_number", err: errors.New("ent: missing required field \"id_number\"")}
	}
	if _, ok := uec.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if _, ok := uec.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New("ent: missing required field \"sex\"")}
	}
	if _, ok := uec.mutation.Birth(); !ok {
		return &ValidationError{Name: "birth", err: errors.New("ent: missing required field \"birth\"")}
	}
	if _, ok := uec.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New("ent: missing required field \"icon\"")}
	}
	if _, ok := uec.mutation.NickName(); !ok {
		return &ValidationError{Name: "nick_name", err: errors.New("ent: missing required field \"nick_name\"")}
	}
	if _, ok := uec.mutation.Imei(); !ok {
		return &ValidationError{Name: "imei", err: errors.New("ent: missing required field \"imei\"")}
	}
	if _, ok := uec.mutation.Oaid(); !ok {
		return &ValidationError{Name: "oaid", err: errors.New("ent: missing required field \"oaid\"")}
	}
	if _, ok := uec.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New("ent: missing required field \"device_id\"")}
	}
	if _, ok := uec.mutation.SystemName(); !ok {
		return &ValidationError{Name: "system_name", err: errors.New("ent: missing required field \"system_name\"")}
	}
	if _, ok := uec.mutation.SystemVersion(); !ok {
		return &ValidationError{Name: "system_version", err: errors.New("ent: missing required field \"system_version\"")}
	}
	if _, ok := uec.mutation.Adid(); !ok {
		return &ValidationError{Name: "adid", err: errors.New("ent: missing required field \"adid\"")}
	}
	if _, ok := uec.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New("ent: missing required field \"game_id\"")}
	}
	if _, ok := uec.mutation.ThirdPlatformID(); !ok {
		return &ValidationError{Name: "third_platform_id", err: errors.New("ent: missing required field \"third_platform_id\"")}
	}
	if _, ok := uec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := uec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (uec *UserExtendCreate) sqlSave(ctx context.Context) (*UserExtend, error) {
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uec *UserExtendCreate) createSpec() (*UserExtend, *sqlgraph.CreateSpec) {
	var (
		_node = &UserExtend{config: uec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userextend.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userextend.FieldID,
			},
		}
	)
	if value, ok := uec.mutation.PlatUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: userextend.FieldPlatUserID,
		})
		_node.PlatUserID = value
	}
	if value, ok := uec.mutation.RealName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldRealName,
		})
		_node.RealName = value
	}
	if value, ok := uec.mutation.IDNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldIDNumber,
		})
		_node.IDNumber = value
	}
	if value, ok := uec.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: userextend.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := uec.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: userextend.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := uec.mutation.Birth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userextend.FieldBirth,
		})
		_node.Birth = value
	}
	if value, ok := uec.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := uec.mutation.NickName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldNickName,
		})
		_node.NickName = value
	}
	if value, ok := uec.mutation.Imei(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldImei,
		})
		_node.Imei = value
	}
	if value, ok := uec.mutation.Oaid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldOaid,
		})
		_node.Oaid = value
	}
	if value, ok := uec.mutation.DeviceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldDeviceID,
		})
		_node.DeviceID = value
	}
	if value, ok := uec.mutation.SystemName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldSystemName,
		})
		_node.SystemName = value
	}
	if value, ok := uec.mutation.SystemVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldSystemVersion,
		})
		_node.SystemVersion = value
	}
	if value, ok := uec.mutation.Adid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldAdid,
		})
		_node.Adid = value
	}
	if value, ok := uec.mutation.GameID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userextend.FieldGameID,
		})
		_node.GameID = value
	}
	if value, ok := uec.mutation.ThirdPlatformID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: userextend.FieldThirdPlatformID,
		})
		_node.ThirdPlatformID = value
	}
	if value, ok := uec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userextend.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserExtendCreateBulk is the builder for creating many UserExtend entities in bulk.
type UserExtendCreateBulk struct {
	config
	builders []*UserExtendCreate
}

// Save creates the UserExtend entities in the database.
func (uecb *UserExtendCreateBulk) Save(ctx context.Context) ([]*UserExtend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UserExtend, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserExtendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uecb *UserExtendCreateBulk) SaveX(ctx context.Context) []*UserExtend {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
