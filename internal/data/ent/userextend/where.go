// Code generated by entc, DO NOT EDIT.

package userextend

import (
	"time"
	"user/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PlatUserID applies equality check predicate on the "plat_user_id" field. It's identical to PlatUserIDEQ.
func PlatUserID(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatUserID), v))
	})
}

// RealName applies equality check predicate on the "real_name" field. It's identical to RealNameEQ.
func RealName(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// IDNumber applies equality check predicate on the "id_number" field. It's identical to IDNumberEQ.
func IDNumber(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// Birth applies equality check predicate on the "birth" field. It's identical to BirthEQ.
func Birth(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirth), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// NickName applies equality check predicate on the "nick_name" field. It's identical to NickNameEQ.
func NickName(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// Imei applies equality check predicate on the "imei" field. It's identical to ImeiEQ.
func Imei(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImei), v))
	})
}

// Oaid applies equality check predicate on the "oaid" field. It's identical to OaidEQ.
func Oaid(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOaid), v))
	})
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// SystemName applies equality check predicate on the "system_name" field. It's identical to SystemNameEQ.
func SystemName(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemName), v))
	})
}

// SystemVersion applies equality check predicate on the "system_version" field. It's identical to SystemVersionEQ.
func SystemVersion(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemVersion), v))
	})
}

// Adid applies equality check predicate on the "adid" field. It's identical to AdidEQ.
func Adid(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdid), v))
	})
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameID), v))
	})
}

// ThirdPlatformID applies equality check predicate on the "third_platform_id" field. It's identical to ThirdPlatformIDEQ.
func ThirdPlatformID(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPlatformID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// PlatUserIDEQ applies the EQ predicate on the "plat_user_id" field.
func PlatUserIDEQ(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatUserID), v))
	})
}

// PlatUserIDNEQ applies the NEQ predicate on the "plat_user_id" field.
func PlatUserIDNEQ(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatUserID), v))
	})
}

// PlatUserIDIn applies the In predicate on the "plat_user_id" field.
func PlatUserIDIn(vs ...uint) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatUserID), v...))
	})
}

// PlatUserIDNotIn applies the NotIn predicate on the "plat_user_id" field.
func PlatUserIDNotIn(vs ...uint) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatUserID), v...))
	})
}

// PlatUserIDGT applies the GT predicate on the "plat_user_id" field.
func PlatUserIDGT(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatUserID), v))
	})
}

// PlatUserIDGTE applies the GTE predicate on the "plat_user_id" field.
func PlatUserIDGTE(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatUserID), v))
	})
}

// PlatUserIDLT applies the LT predicate on the "plat_user_id" field.
func PlatUserIDLT(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatUserID), v))
	})
}

// PlatUserIDLTE applies the LTE predicate on the "plat_user_id" field.
func PlatUserIDLTE(v uint) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatUserID), v))
	})
}

// RealNameEQ applies the EQ predicate on the "real_name" field.
func RealNameEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// RealNameNEQ applies the NEQ predicate on the "real_name" field.
func RealNameNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRealName), v))
	})
}

// RealNameIn applies the In predicate on the "real_name" field.
func RealNameIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRealName), v...))
	})
}

// RealNameNotIn applies the NotIn predicate on the "real_name" field.
func RealNameNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRealName), v...))
	})
}

// RealNameGT applies the GT predicate on the "real_name" field.
func RealNameGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRealName), v))
	})
}

// RealNameGTE applies the GTE predicate on the "real_name" field.
func RealNameGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRealName), v))
	})
}

// RealNameLT applies the LT predicate on the "real_name" field.
func RealNameLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRealName), v))
	})
}

// RealNameLTE applies the LTE predicate on the "real_name" field.
func RealNameLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRealName), v))
	})
}

// RealNameContains applies the Contains predicate on the "real_name" field.
func RealNameContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRealName), v))
	})
}

// RealNameHasPrefix applies the HasPrefix predicate on the "real_name" field.
func RealNameHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRealName), v))
	})
}

// RealNameHasSuffix applies the HasSuffix predicate on the "real_name" field.
func RealNameHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRealName), v))
	})
}

// RealNameEqualFold applies the EqualFold predicate on the "real_name" field.
func RealNameEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRealName), v))
	})
}

// RealNameContainsFold applies the ContainsFold predicate on the "real_name" field.
func RealNameContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRealName), v))
	})
}

// IDNumberEQ applies the EQ predicate on the "id_number" field.
func IDNumberEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberNEQ applies the NEQ predicate on the "id_number" field.
func IDNumberNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDNumber), v))
	})
}

// IDNumberIn applies the In predicate on the "id_number" field.
func IDNumberIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIDNumber), v...))
	})
}

// IDNumberNotIn applies the NotIn predicate on the "id_number" field.
func IDNumberNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIDNumber), v...))
	})
}

// IDNumberGT applies the GT predicate on the "id_number" field.
func IDNumberGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDNumber), v))
	})
}

// IDNumberGTE applies the GTE predicate on the "id_number" field.
func IDNumberGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberLT applies the LT predicate on the "id_number" field.
func IDNumberLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDNumber), v))
	})
}

// IDNumberLTE applies the LTE predicate on the "id_number" field.
func IDNumberLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDNumber), v))
	})
}

// IDNumberContains applies the Contains predicate on the "id_number" field.
func IDNumberContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasPrefix applies the HasPrefix predicate on the "id_number" field.
func IDNumberHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDNumber), v))
	})
}

// IDNumberHasSuffix applies the HasSuffix predicate on the "id_number" field.
func IDNumberHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDNumber), v))
	})
}

// IDNumberEqualFold applies the EqualFold predicate on the "id_number" field.
func IDNumberEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDNumber), v))
	})
}

// IDNumberContainsFold applies the ContainsFold predicate on the "id_number" field.
func IDNumberContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDNumber), v))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSex), v))
	})
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSex), v))
	})
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSex), v...))
	})
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSex), v...))
	})
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSex), v))
	})
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSex), v))
	})
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSex), v))
	})
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSex), v))
	})
}

// BirthEQ applies the EQ predicate on the "birth" field.
func BirthEQ(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirth), v))
	})
}

// BirthNEQ applies the NEQ predicate on the "birth" field.
func BirthNEQ(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirth), v))
	})
}

// BirthIn applies the In predicate on the "birth" field.
func BirthIn(vs ...int) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirth), v...))
	})
}

// BirthNotIn applies the NotIn predicate on the "birth" field.
func BirthNotIn(vs ...int) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirth), v...))
	})
}

// BirthGT applies the GT predicate on the "birth" field.
func BirthGT(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirth), v))
	})
}

// BirthGTE applies the GTE predicate on the "birth" field.
func BirthGTE(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirth), v))
	})
}

// BirthLT applies the LT predicate on the "birth" field.
func BirthLT(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirth), v))
	})
}

// BirthLTE applies the LTE predicate on the "birth" field.
func BirthLTE(v int) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirth), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// NickNameEQ applies the EQ predicate on the "nick_name" field.
func NickNameEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickName), v))
	})
}

// NickNameNEQ applies the NEQ predicate on the "nick_name" field.
func NickNameNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickName), v))
	})
}

// NickNameIn applies the In predicate on the "nick_name" field.
func NickNameIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNickName), v...))
	})
}

// NickNameNotIn applies the NotIn predicate on the "nick_name" field.
func NickNameNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNickName), v...))
	})
}

// NickNameGT applies the GT predicate on the "nick_name" field.
func NickNameGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickName), v))
	})
}

// NickNameGTE applies the GTE predicate on the "nick_name" field.
func NickNameGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickName), v))
	})
}

// NickNameLT applies the LT predicate on the "nick_name" field.
func NickNameLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickName), v))
	})
}

// NickNameLTE applies the LTE predicate on the "nick_name" field.
func NickNameLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickName), v))
	})
}

// NickNameContains applies the Contains predicate on the "nick_name" field.
func NickNameContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickName), v))
	})
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nick_name" field.
func NickNameHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickName), v))
	})
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nick_name" field.
func NickNameHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickName), v))
	})
}

// NickNameEqualFold applies the EqualFold predicate on the "nick_name" field.
func NickNameEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickName), v))
	})
}

// NickNameContainsFold applies the ContainsFold predicate on the "nick_name" field.
func NickNameContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickName), v))
	})
}

// ImeiEQ applies the EQ predicate on the "imei" field.
func ImeiEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImei), v))
	})
}

// ImeiNEQ applies the NEQ predicate on the "imei" field.
func ImeiNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImei), v))
	})
}

// ImeiIn applies the In predicate on the "imei" field.
func ImeiIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImei), v...))
	})
}

// ImeiNotIn applies the NotIn predicate on the "imei" field.
func ImeiNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImei), v...))
	})
}

// ImeiGT applies the GT predicate on the "imei" field.
func ImeiGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImei), v))
	})
}

// ImeiGTE applies the GTE predicate on the "imei" field.
func ImeiGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImei), v))
	})
}

// ImeiLT applies the LT predicate on the "imei" field.
func ImeiLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImei), v))
	})
}

// ImeiLTE applies the LTE predicate on the "imei" field.
func ImeiLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImei), v))
	})
}

// ImeiContains applies the Contains predicate on the "imei" field.
func ImeiContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImei), v))
	})
}

// ImeiHasPrefix applies the HasPrefix predicate on the "imei" field.
func ImeiHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImei), v))
	})
}

// ImeiHasSuffix applies the HasSuffix predicate on the "imei" field.
func ImeiHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImei), v))
	})
}

// ImeiEqualFold applies the EqualFold predicate on the "imei" field.
func ImeiEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImei), v))
	})
}

// ImeiContainsFold applies the ContainsFold predicate on the "imei" field.
func ImeiContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImei), v))
	})
}

// OaidEQ applies the EQ predicate on the "oaid" field.
func OaidEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOaid), v))
	})
}

// OaidNEQ applies the NEQ predicate on the "oaid" field.
func OaidNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOaid), v))
	})
}

// OaidIn applies the In predicate on the "oaid" field.
func OaidIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOaid), v...))
	})
}

// OaidNotIn applies the NotIn predicate on the "oaid" field.
func OaidNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOaid), v...))
	})
}

// OaidGT applies the GT predicate on the "oaid" field.
func OaidGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOaid), v))
	})
}

// OaidGTE applies the GTE predicate on the "oaid" field.
func OaidGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOaid), v))
	})
}

// OaidLT applies the LT predicate on the "oaid" field.
func OaidLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOaid), v))
	})
}

// OaidLTE applies the LTE predicate on the "oaid" field.
func OaidLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOaid), v))
	})
}

// OaidContains applies the Contains predicate on the "oaid" field.
func OaidContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOaid), v))
	})
}

// OaidHasPrefix applies the HasPrefix predicate on the "oaid" field.
func OaidHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOaid), v))
	})
}

// OaidHasSuffix applies the HasSuffix predicate on the "oaid" field.
func OaidHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOaid), v))
	})
}

// OaidEqualFold applies the EqualFold predicate on the "oaid" field.
func OaidEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOaid), v))
	})
}

// OaidContainsFold applies the ContainsFold predicate on the "oaid" field.
func OaidContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOaid), v))
	})
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceID), v))
	})
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceID), v))
	})
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceID), v))
	})
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceID), v))
	})
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceID), v))
	})
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceID), v))
	})
}

// SystemNameEQ applies the EQ predicate on the "system_name" field.
func SystemNameEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemName), v))
	})
}

// SystemNameNEQ applies the NEQ predicate on the "system_name" field.
func SystemNameNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemName), v))
	})
}

// SystemNameIn applies the In predicate on the "system_name" field.
func SystemNameIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemName), v...))
	})
}

// SystemNameNotIn applies the NotIn predicate on the "system_name" field.
func SystemNameNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemName), v...))
	})
}

// SystemNameGT applies the GT predicate on the "system_name" field.
func SystemNameGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemName), v))
	})
}

// SystemNameGTE applies the GTE predicate on the "system_name" field.
func SystemNameGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemName), v))
	})
}

// SystemNameLT applies the LT predicate on the "system_name" field.
func SystemNameLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemName), v))
	})
}

// SystemNameLTE applies the LTE predicate on the "system_name" field.
func SystemNameLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemName), v))
	})
}

// SystemNameContains applies the Contains predicate on the "system_name" field.
func SystemNameContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemName), v))
	})
}

// SystemNameHasPrefix applies the HasPrefix predicate on the "system_name" field.
func SystemNameHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemName), v))
	})
}

// SystemNameHasSuffix applies the HasSuffix predicate on the "system_name" field.
func SystemNameHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemName), v))
	})
}

// SystemNameEqualFold applies the EqualFold predicate on the "system_name" field.
func SystemNameEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemName), v))
	})
}

// SystemNameContainsFold applies the ContainsFold predicate on the "system_name" field.
func SystemNameContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemName), v))
	})
}

// SystemVersionEQ applies the EQ predicate on the "system_version" field.
func SystemVersionEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionNEQ applies the NEQ predicate on the "system_version" field.
func SystemVersionNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionIn applies the In predicate on the "system_version" field.
func SystemVersionIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemVersion), v...))
	})
}

// SystemVersionNotIn applies the NotIn predicate on the "system_version" field.
func SystemVersionNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemVersion), v...))
	})
}

// SystemVersionGT applies the GT predicate on the "system_version" field.
func SystemVersionGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionGTE applies the GTE predicate on the "system_version" field.
func SystemVersionGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionLT applies the LT predicate on the "system_version" field.
func SystemVersionLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionLTE applies the LTE predicate on the "system_version" field.
func SystemVersionLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionContains applies the Contains predicate on the "system_version" field.
func SystemVersionContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionHasPrefix applies the HasPrefix predicate on the "system_version" field.
func SystemVersionHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionHasSuffix applies the HasSuffix predicate on the "system_version" field.
func SystemVersionHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionEqualFold applies the EqualFold predicate on the "system_version" field.
func SystemVersionEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemVersion), v))
	})
}

// SystemVersionContainsFold applies the ContainsFold predicate on the "system_version" field.
func SystemVersionContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemVersion), v))
	})
}

// AdidEQ applies the EQ predicate on the "adid" field.
func AdidEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdid), v))
	})
}

// AdidNEQ applies the NEQ predicate on the "adid" field.
func AdidNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdid), v))
	})
}

// AdidIn applies the In predicate on the "adid" field.
func AdidIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdid), v...))
	})
}

// AdidNotIn applies the NotIn predicate on the "adid" field.
func AdidNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdid), v...))
	})
}

// AdidGT applies the GT predicate on the "adid" field.
func AdidGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdid), v))
	})
}

// AdidGTE applies the GTE predicate on the "adid" field.
func AdidGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdid), v))
	})
}

// AdidLT applies the LT predicate on the "adid" field.
func AdidLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdid), v))
	})
}

// AdidLTE applies the LTE predicate on the "adid" field.
func AdidLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdid), v))
	})
}

// AdidContains applies the Contains predicate on the "adid" field.
func AdidContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdid), v))
	})
}

// AdidHasPrefix applies the HasPrefix predicate on the "adid" field.
func AdidHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdid), v))
	})
}

// AdidHasSuffix applies the HasSuffix predicate on the "adid" field.
func AdidHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdid), v))
	})
}

// AdidEqualFold applies the EqualFold predicate on the "adid" field.
func AdidEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdid), v))
	})
}

// AdidContainsFold applies the ContainsFold predicate on the "adid" field.
func AdidContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdid), v))
	})
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameID), v))
	})
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGameID), v))
	})
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGameID), v...))
	})
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...string) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGameID), v...))
	})
}

// GameIDGT applies the GT predicate on the "game_id" field.
func GameIDGT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGameID), v))
	})
}

// GameIDGTE applies the GTE predicate on the "game_id" field.
func GameIDGTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGameID), v))
	})
}

// GameIDLT applies the LT predicate on the "game_id" field.
func GameIDLT(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGameID), v))
	})
}

// GameIDLTE applies the LTE predicate on the "game_id" field.
func GameIDLTE(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGameID), v))
	})
}

// GameIDContains applies the Contains predicate on the "game_id" field.
func GameIDContains(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGameID), v))
	})
}

// GameIDHasPrefix applies the HasPrefix predicate on the "game_id" field.
func GameIDHasPrefix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGameID), v))
	})
}

// GameIDHasSuffix applies the HasSuffix predicate on the "game_id" field.
func GameIDHasSuffix(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGameID), v))
	})
}

// GameIDEqualFold applies the EqualFold predicate on the "game_id" field.
func GameIDEqualFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGameID), v))
	})
}

// GameIDContainsFold applies the ContainsFold predicate on the "game_id" field.
func GameIDContainsFold(v string) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGameID), v))
	})
}

// ThirdPlatformIDEQ applies the EQ predicate on the "third_platform_id" field.
func ThirdPlatformIDEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPlatformID), v))
	})
}

// ThirdPlatformIDNEQ applies the NEQ predicate on the "third_platform_id" field.
func ThirdPlatformIDNEQ(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPlatformID), v))
	})
}

// ThirdPlatformIDIn applies the In predicate on the "third_platform_id" field.
func ThirdPlatformIDIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdPlatformID), v...))
	})
}

// ThirdPlatformIDNotIn applies the NotIn predicate on the "third_platform_id" field.
func ThirdPlatformIDNotIn(vs ...int8) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdPlatformID), v...))
	})
}

// ThirdPlatformIDGT applies the GT predicate on the "third_platform_id" field.
func ThirdPlatformIDGT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPlatformID), v))
	})
}

// ThirdPlatformIDGTE applies the GTE predicate on the "third_platform_id" field.
func ThirdPlatformIDGTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPlatformID), v))
	})
}

// ThirdPlatformIDLT applies the LT predicate on the "third_platform_id" field.
func ThirdPlatformIDLT(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPlatformID), v))
	})
}

// ThirdPlatformIDLTE applies the LTE predicate on the "third_platform_id" field.
func ThirdPlatformIDLTE(v int8) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPlatformID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserExtend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserExtend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserExtend) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserExtend) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserExtend) predicate.UserExtend {
	return predicate.UserExtend(func(s *sql.Selector) {
		p(s.Not())
	})
}
