// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"user/internal/data/ent/userextend"

	"entgo.io/ent/dialect/sql"
)

// UserExtend is the model entity for the UserExtend schema.
type UserExtend struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PlatUserID holds the value of the "plat_user_id" field.
	PlatUserID uint `json:"plat_user_id,omitempty"`
	// RealName holds the value of the "real_name" field.
	RealName string `json:"real_name,omitempty"`
	// IDNumber holds the value of the "id_number" field.
	IDNumber string `json:"id_number,omitempty"`
	// Age holds the value of the "age" field.
	Age int8 `json:"age,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex int8 `json:"sex,omitempty"`
	// Birth holds the value of the "birth" field.
	Birth int `json:"birth,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// NickName holds the value of the "nick_name" field.
	NickName string `json:"nick_name,omitempty"`
	// Imei holds the value of the "imei" field.
	Imei string `json:"imei,omitempty"`
	// Oaid holds the value of the "oaid" field.
	Oaid string `json:"oaid,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// SystemName holds the value of the "system_name" field.
	SystemName string `json:"system_name,omitempty"`
	// SystemVersion holds the value of the "system_version" field.
	SystemVersion string `json:"system_version,omitempty"`
	// Adid holds the value of the "adid" field.
	Adid string `json:"adid,omitempty"`
	// GameID holds the value of the "game_id" field.
	GameID string `json:"game_id,omitempty"`
	// ThirdPlatformID holds the value of the "third_platform_id" field.
	ThirdPlatformID int8 `json:"third_platform_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserExtend) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userextend.FieldID, userextend.FieldPlatUserID, userextend.FieldAge, userextend.FieldSex, userextend.FieldBirth, userextend.FieldThirdPlatformID:
			values[i] = new(sql.NullInt64)
		case userextend.FieldRealName, userextend.FieldIDNumber, userextend.FieldIcon, userextend.FieldNickName, userextend.FieldImei, userextend.FieldOaid, userextend.FieldDeviceID, userextend.FieldSystemName, userextend.FieldSystemVersion, userextend.FieldAdid, userextend.FieldGameID:
			values[i] = new(sql.NullString)
		case userextend.FieldCreatedAt, userextend.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserExtend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserExtend fields.
func (ue *UserExtend) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userextend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ue.ID = int(value.Int64)
		case userextend.FieldPlatUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plat_user_id", values[i])
			} else if value.Valid {
				ue.PlatUserID = uint(value.Int64)
			}
		case userextend.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				ue.RealName = value.String
			}
		case userextend.FieldIDNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_number", values[i])
			} else if value.Valid {
				ue.IDNumber = value.String
			}
		case userextend.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				ue.Age = int8(value.Int64)
			}
		case userextend.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				ue.Sex = int8(value.Int64)
			}
		case userextend.FieldBirth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birth", values[i])
			} else if value.Valid {
				ue.Birth = int(value.Int64)
			}
		case userextend.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				ue.Icon = value.String
			}
		case userextend.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nick_name", values[i])
			} else if value.Valid {
				ue.NickName = value.String
			}
		case userextend.FieldImei:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imei", values[i])
			} else if value.Valid {
				ue.Imei = value.String
			}
		case userextend.FieldOaid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oaid", values[i])
			} else if value.Valid {
				ue.Oaid = value.String
			}
		case userextend.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ue.DeviceID = value.String
			}
		case userextend.FieldSystemName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_name", values[i])
			} else if value.Valid {
				ue.SystemName = value.String
			}
		case userextend.FieldSystemVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_version", values[i])
			} else if value.Valid {
				ue.SystemVersion = value.String
			}
		case userextend.FieldAdid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field adid", values[i])
			} else if value.Valid {
				ue.Adid = value.String
			}
		case userextend.FieldGameID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_id", values[i])
			} else if value.Valid {
				ue.GameID = value.String
			}
		case userextend.FieldThirdPlatformID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field third_platform_id", values[i])
			} else if value.Valid {
				ue.ThirdPlatformID = int8(value.Int64)
			}
		case userextend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ue.CreatedAt = value.Time
			}
		case userextend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ue.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserExtend.
// Note that you need to call UserExtend.Unwrap() before calling this method if this UserExtend
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UserExtend) Update() *UserExtendUpdateOne {
	return (&UserExtendClient{config: ue.config}).UpdateOne(ue)
}

// Unwrap unwraps the UserExtend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ue *UserExtend) Unwrap() *UserExtend {
	tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserExtend is not a transactional entity")
	}
	ue.config.driver = tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UserExtend) String() string {
	var builder strings.Builder
	builder.WriteString("UserExtend(")
	builder.WriteString(fmt.Sprintf("id=%v", ue.ID))
	builder.WriteString(", plat_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ue.PlatUserID))
	builder.WriteString(", real_name=")
	builder.WriteString(ue.RealName)
	builder.WriteString(", id_number=")
	builder.WriteString(ue.IDNumber)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", ue.Age))
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", ue.Sex))
	builder.WriteString(", birth=")
	builder.WriteString(fmt.Sprintf("%v", ue.Birth))
	builder.WriteString(", icon=")
	builder.WriteString(ue.Icon)
	builder.WriteString(", nick_name=")
	builder.WriteString(ue.NickName)
	builder.WriteString(", imei=")
	builder.WriteString(ue.Imei)
	builder.WriteString(", oaid=")
	builder.WriteString(ue.Oaid)
	builder.WriteString(", device_id=")
	builder.WriteString(ue.DeviceID)
	builder.WriteString(", system_name=")
	builder.WriteString(ue.SystemName)
	builder.WriteString(", system_version=")
	builder.WriteString(ue.SystemVersion)
	builder.WriteString(", adid=")
	builder.WriteString(ue.Adid)
	builder.WriteString(", game_id=")
	builder.WriteString(ue.GameID)
	builder.WriteString(", third_platform_id=")
	builder.WriteString(fmt.Sprintf("%v", ue.ThirdPlatformID))
	builder.WriteString(", created_at=")
	builder.WriteString(ue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ue.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserExtends is a parsable slice of UserExtend.
type UserExtends []*UserExtend

func (ue UserExtends) config(cfg config) {
	for _i := range ue {
		ue[_i].config = cfg
	}
}
