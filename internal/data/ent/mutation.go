// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"
	"user/internal/data/ent/predicate"
	"user/internal/data/ent/user"
	"user/internal/data/ent/userextend"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser       = "User"
	TypeUserExtend = "UserExtend"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	user_name      *string
	email          *string
	tel_num        *string
	password       *string
	password_str   *string
	reg_type       *int8
	addreg_type    *int8
	register_time  *time.Time
	register_ip    *int
	addregister_ip *int
	tel_status     *int8
	addtel_status  *int8
	status         *int8
	addstatus      *int8
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetTelNum sets the "tel_num" field.
func (m *UserMutation) SetTelNum(s string) {
	m.tel_num = &s
}

// TelNum returns the value of the "tel_num" field in the mutation.
func (m *UserMutation) TelNum() (r string, exists bool) {
	v := m.tel_num
	if v == nil {
		return
	}
	return *v, true
}

// OldTelNum returns the old "tel_num" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelNum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTelNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTelNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelNum: %w", err)
	}
	return oldValue.TelNum, nil
}

// ResetTelNum resets all changes to the "tel_num" field.
func (m *UserMutation) ResetTelNum() {
	m.tel_num = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetPasswordStr sets the "password_str" field.
func (m *UserMutation) SetPasswordStr(s string) {
	m.password_str = &s
}

// PasswordStr returns the value of the "password_str" field in the mutation.
func (m *UserMutation) PasswordStr() (r string, exists bool) {
	v := m.password_str
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordStr returns the old "password_str" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPasswordStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPasswordStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordStr: %w", err)
	}
	return oldValue.PasswordStr, nil
}

// ResetPasswordStr resets all changes to the "password_str" field.
func (m *UserMutation) ResetPasswordStr() {
	m.password_str = nil
}

// SetRegType sets the "reg_type" field.
func (m *UserMutation) SetRegType(i int8) {
	m.reg_type = &i
	m.addreg_type = nil
}

// RegType returns the value of the "reg_type" field in the mutation.
func (m *UserMutation) RegType() (r int8, exists bool) {
	v := m.reg_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRegType returns the old "reg_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegType: %w", err)
	}
	return oldValue.RegType, nil
}

// AddRegType adds i to the "reg_type" field.
func (m *UserMutation) AddRegType(i int8) {
	if m.addreg_type != nil {
		*m.addreg_type += i
	} else {
		m.addreg_type = &i
	}
}

// AddedRegType returns the value that was added to the "reg_type" field in this mutation.
func (m *UserMutation) AddedRegType() (r int8, exists bool) {
	v := m.addreg_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegType resets all changes to the "reg_type" field.
func (m *UserMutation) ResetRegType() {
	m.reg_type = nil
	m.addreg_type = nil
}

// SetRegisterTime sets the "register_time" field.
func (m *UserMutation) SetRegisterTime(t time.Time) {
	m.register_time = &t
}

// RegisterTime returns the value of the "register_time" field in the mutation.
func (m *UserMutation) RegisterTime() (r time.Time, exists bool) {
	v := m.register_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterTime returns the old "register_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegisterTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisterTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisterTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterTime: %w", err)
	}
	return oldValue.RegisterTime, nil
}

// ResetRegisterTime resets all changes to the "register_time" field.
func (m *UserMutation) ResetRegisterTime() {
	m.register_time = nil
}

// SetRegisterIP sets the "register_ip" field.
func (m *UserMutation) SetRegisterIP(i int) {
	m.register_ip = &i
	m.addregister_ip = nil
}

// RegisterIP returns the value of the "register_ip" field in the mutation.
func (m *UserMutation) RegisterIP() (r int, exists bool) {
	v := m.register_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterIP returns the old "register_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegisterIP(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisterIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisterIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterIP: %w", err)
	}
	return oldValue.RegisterIP, nil
}

// AddRegisterIP adds i to the "register_ip" field.
func (m *UserMutation) AddRegisterIP(i int) {
	if m.addregister_ip != nil {
		*m.addregister_ip += i
	} else {
		m.addregister_ip = &i
	}
}

// AddedRegisterIP returns the value that was added to the "register_ip" field in this mutation.
func (m *UserMutation) AddedRegisterIP() (r int, exists bool) {
	v := m.addregister_ip
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegisterIP resets all changes to the "register_ip" field.
func (m *UserMutation) ResetRegisterIP() {
	m.register_ip = nil
	m.addregister_ip = nil
}

// SetTelStatus sets the "tel_status" field.
func (m *UserMutation) SetTelStatus(i int8) {
	m.tel_status = &i
	m.addtel_status = nil
}

// TelStatus returns the value of the "tel_status" field in the mutation.
func (m *UserMutation) TelStatus() (r int8, exists bool) {
	v := m.tel_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTelStatus returns the old "tel_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTelStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTelStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelStatus: %w", err)
	}
	return oldValue.TelStatus, nil
}

// AddTelStatus adds i to the "tel_status" field.
func (m *UserMutation) AddTelStatus(i int8) {
	if m.addtel_status != nil {
		*m.addtel_status += i
	} else {
		m.addtel_status = &i
	}
}

// AddedTelStatus returns the value that was added to the "tel_status" field in this mutation.
func (m *UserMutation) AddedTelStatus() (r int8, exists bool) {
	v := m.addtel_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetTelStatus resets all changes to the "tel_status" field.
func (m *UserMutation) ResetTelStatus() {
	m.tel_status = nil
	m.addtel_status = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.tel_num != nil {
		fields = append(fields, user.FieldTelNum)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.password_str != nil {
		fields = append(fields, user.FieldPasswordStr)
	}
	if m.reg_type != nil {
		fields = append(fields, user.FieldRegType)
	}
	if m.register_time != nil {
		fields = append(fields, user.FieldRegisterTime)
	}
	if m.register_ip != nil {
		fields = append(fields, user.FieldRegisterIP)
	}
	if m.tel_status != nil {
		fields = append(fields, user.FieldTelStatus)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserName:
		return m.UserName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldTelNum:
		return m.TelNum()
	case user.FieldPassword:
		return m.Password()
	case user.FieldPasswordStr:
		return m.PasswordStr()
	case user.FieldRegType:
		return m.RegType()
	case user.FieldRegisterTime:
		return m.RegisterTime()
	case user.FieldRegisterIP:
		return m.RegisterIP()
	case user.FieldTelStatus:
		return m.TelStatus()
	case user.FieldStatus:
		return m.Status()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldTelNum:
		return m.OldTelNum(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldPasswordStr:
		return m.OldPasswordStr(ctx)
	case user.FieldRegType:
		return m.OldRegType(ctx)
	case user.FieldRegisterTime:
		return m.OldRegisterTime(ctx)
	case user.FieldRegisterIP:
		return m.OldRegisterIP(ctx)
	case user.FieldTelStatus:
		return m.OldTelStatus(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldTelNum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelNum(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldPasswordStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordStr(v)
		return nil
	case user.FieldRegType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegType(v)
		return nil
	case user.FieldRegisterTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterTime(v)
		return nil
	case user.FieldRegisterIP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterIP(v)
		return nil
	case user.FieldTelStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelStatus(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addreg_type != nil {
		fields = append(fields, user.FieldRegType)
	}
	if m.addregister_ip != nil {
		fields = append(fields, user.FieldRegisterIP)
	}
	if m.addtel_status != nil {
		fields = append(fields, user.FieldTelStatus)
	}
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRegType:
		return m.AddedRegType()
	case user.FieldRegisterIP:
		return m.AddedRegisterIP()
	case user.FieldTelStatus:
		return m.AddedTelStatus()
	case user.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldRegType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegType(v)
		return nil
	case user.FieldRegisterIP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegisterIP(v)
		return nil
	case user.FieldTelStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelStatus(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldTelNum:
		m.ResetTelNum()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldPasswordStr:
		m.ResetPasswordStr()
		return nil
	case user.FieldRegType:
		m.ResetRegType()
		return nil
	case user.FieldRegisterTime:
		m.ResetRegisterTime()
		return nil
	case user.FieldRegisterIP:
		m.ResetRegisterIP()
		return nil
	case user.FieldTelStatus:
		m.ResetTelStatus()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserExtendMutation represents an operation that mutates the UserExtend nodes in the graph.
type UserExtendMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	plat_user_id         *uint
	addplat_user_id      *uint
	real_name            *string
	id_number            *string
	age                  *int8
	addage               *int8
	sex                  *int8
	addsex               *int8
	birth                *int
	addbirth             *int
	icon                 *string
	nick_name            *string
	imei                 *string
	oaid                 *string
	device_id            *string
	system_name          *string
	system_version       *string
	adid                 *string
	game_id              *string
	third_platform_id    *int8
	addthird_platform_id *int8
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*UserExtend, error)
	predicates           []predicate.UserExtend
}

var _ ent.Mutation = (*UserExtendMutation)(nil)

// userextendOption allows management of the mutation configuration using functional options.
type userextendOption func(*UserExtendMutation)

// newUserExtendMutation creates new mutation for the UserExtend entity.
func newUserExtendMutation(c config, op Op, opts ...userextendOption) *UserExtendMutation {
	m := &UserExtendMutation{
		config:        c,
		op:            op,
		typ:           TypeUserExtend,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserExtendID sets the ID field of the mutation.
func withUserExtendID(id int) userextendOption {
	return func(m *UserExtendMutation) {
		var (
			err   error
			once  sync.Once
			value *UserExtend
		)
		m.oldValue = func(ctx context.Context) (*UserExtend, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserExtend.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserExtend sets the old UserExtend of the mutation.
func withUserExtend(node *UserExtend) userextendOption {
	return func(m *UserExtendMutation) {
		m.oldValue = func(context.Context) (*UserExtend, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserExtendMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserExtendMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserExtendMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPlatUserID sets the "plat_user_id" field.
func (m *UserExtendMutation) SetPlatUserID(u uint) {
	m.plat_user_id = &u
	m.addplat_user_id = nil
}

// PlatUserID returns the value of the "plat_user_id" field in the mutation.
func (m *UserExtendMutation) PlatUserID() (r uint, exists bool) {
	v := m.plat_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatUserID returns the old "plat_user_id" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldPlatUserID(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlatUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlatUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatUserID: %w", err)
	}
	return oldValue.PlatUserID, nil
}

// AddPlatUserID adds u to the "plat_user_id" field.
func (m *UserExtendMutation) AddPlatUserID(u uint) {
	if m.addplat_user_id != nil {
		*m.addplat_user_id += u
	} else {
		m.addplat_user_id = &u
	}
}

// AddedPlatUserID returns the value that was added to the "plat_user_id" field in this mutation.
func (m *UserExtendMutation) AddedPlatUserID() (r uint, exists bool) {
	v := m.addplat_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlatUserID resets all changes to the "plat_user_id" field.
func (m *UserExtendMutation) ResetPlatUserID() {
	m.plat_user_id = nil
	m.addplat_user_id = nil
}

// SetRealName sets the "real_name" field.
func (m *UserExtendMutation) SetRealName(s string) {
	m.real_name = &s
}

// RealName returns the value of the "real_name" field in the mutation.
func (m *UserExtendMutation) RealName() (r string, exists bool) {
	v := m.real_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRealName returns the old "real_name" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldRealName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRealName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRealName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealName: %w", err)
	}
	return oldValue.RealName, nil
}

// ResetRealName resets all changes to the "real_name" field.
func (m *UserExtendMutation) ResetRealName() {
	m.real_name = nil
}

// SetIDNumber sets the "id_number" field.
func (m *UserExtendMutation) SetIDNumber(s string) {
	m.id_number = &s
}

// IDNumber returns the value of the "id_number" field in the mutation.
func (m *UserExtendMutation) IDNumber() (r string, exists bool) {
	v := m.id_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDNumber returns the old "id_number" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldIDNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDNumber: %w", err)
	}
	return oldValue.IDNumber, nil
}

// ResetIDNumber resets all changes to the "id_number" field.
func (m *UserExtendMutation) ResetIDNumber() {
	m.id_number = nil
}

// SetAge sets the "age" field.
func (m *UserExtendMutation) SetAge(i int8) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserExtendMutation) Age() (r int8, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldAge(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserExtendMutation) AddAge(i int8) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserExtendMutation) AddedAge() (r int8, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserExtendMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetSex sets the "sex" field.
func (m *UserExtendMutation) SetSex(i int8) {
	m.sex = &i
	m.addsex = nil
}

// Sex returns the value of the "sex" field in the mutation.
func (m *UserExtendMutation) Sex() (r int8, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldSex(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// AddSex adds i to the "sex" field.
func (m *UserExtendMutation) AddSex(i int8) {
	if m.addsex != nil {
		*m.addsex += i
	} else {
		m.addsex = &i
	}
}

// AddedSex returns the value that was added to the "sex" field in this mutation.
func (m *UserExtendMutation) AddedSex() (r int8, exists bool) {
	v := m.addsex
	if v == nil {
		return
	}
	return *v, true
}

// ResetSex resets all changes to the "sex" field.
func (m *UserExtendMutation) ResetSex() {
	m.sex = nil
	m.addsex = nil
}

// SetBirth sets the "birth" field.
func (m *UserExtendMutation) SetBirth(i int) {
	m.birth = &i
	m.addbirth = nil
}

// Birth returns the value of the "birth" field in the mutation.
func (m *UserExtendMutation) Birth() (r int, exists bool) {
	v := m.birth
	if v == nil {
		return
	}
	return *v, true
}

// OldBirth returns the old "birth" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldBirth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirth: %w", err)
	}
	return oldValue.Birth, nil
}

// AddBirth adds i to the "birth" field.
func (m *UserExtendMutation) AddBirth(i int) {
	if m.addbirth != nil {
		*m.addbirth += i
	} else {
		m.addbirth = &i
	}
}

// AddedBirth returns the value that was added to the "birth" field in this mutation.
func (m *UserExtendMutation) AddedBirth() (r int, exists bool) {
	v := m.addbirth
	if v == nil {
		return
	}
	return *v, true
}

// ResetBirth resets all changes to the "birth" field.
func (m *UserExtendMutation) ResetBirth() {
	m.birth = nil
	m.addbirth = nil
}

// SetIcon sets the "icon" field.
func (m *UserExtendMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *UserExtendMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *UserExtendMutation) ResetIcon() {
	m.icon = nil
}

// SetNickName sets the "nick_name" field.
func (m *UserExtendMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UserExtendMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UserExtendMutation) ResetNickName() {
	m.nick_name = nil
}

// SetImei sets the "imei" field.
func (m *UserExtendMutation) SetImei(s string) {
	m.imei = &s
}

// Imei returns the value of the "imei" field in the mutation.
func (m *UserExtendMutation) Imei() (r string, exists bool) {
	v := m.imei
	if v == nil {
		return
	}
	return *v, true
}

// OldImei returns the old "imei" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldImei(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImei is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImei requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImei: %w", err)
	}
	return oldValue.Imei, nil
}

// ResetImei resets all changes to the "imei" field.
func (m *UserExtendMutation) ResetImei() {
	m.imei = nil
}

// SetOaid sets the "oaid" field.
func (m *UserExtendMutation) SetOaid(s string) {
	m.oaid = &s
}

// Oaid returns the value of the "oaid" field in the mutation.
func (m *UserExtendMutation) Oaid() (r string, exists bool) {
	v := m.oaid
	if v == nil {
		return
	}
	return *v, true
}

// OldOaid returns the old "oaid" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldOaid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOaid: %w", err)
	}
	return oldValue.Oaid, nil
}

// ResetOaid resets all changes to the "oaid" field.
func (m *UserExtendMutation) ResetOaid() {
	m.oaid = nil
}

// SetDeviceID sets the "device_id" field.
func (m *UserExtendMutation) SetDeviceID(s string) {
	m.device_id = &s
}

// DeviceID returns the value of the "device_id" field in the mutation.
func (m *UserExtendMutation) DeviceID() (r string, exists bool) {
	v := m.device_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceID returns the old "device_id" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldDeviceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeviceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeviceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceID: %w", err)
	}
	return oldValue.DeviceID, nil
}

// ResetDeviceID resets all changes to the "device_id" field.
func (m *UserExtendMutation) ResetDeviceID() {
	m.device_id = nil
}

// SetSystemName sets the "system_name" field.
func (m *UserExtendMutation) SetSystemName(s string) {
	m.system_name = &s
}

// SystemName returns the value of the "system_name" field in the mutation.
func (m *UserExtendMutation) SystemName() (r string, exists bool) {
	v := m.system_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemName returns the old "system_name" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldSystemName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSystemName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSystemName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemName: %w", err)
	}
	return oldValue.SystemName, nil
}

// ResetSystemName resets all changes to the "system_name" field.
func (m *UserExtendMutation) ResetSystemName() {
	m.system_name = nil
}

// SetSystemVersion sets the "system_version" field.
func (m *UserExtendMutation) SetSystemVersion(s string) {
	m.system_version = &s
}

// SystemVersion returns the value of the "system_version" field in the mutation.
func (m *UserExtendMutation) SystemVersion() (r string, exists bool) {
	v := m.system_version
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemVersion returns the old "system_version" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldSystemVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSystemVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSystemVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemVersion: %w", err)
	}
	return oldValue.SystemVersion, nil
}

// ResetSystemVersion resets all changes to the "system_version" field.
func (m *UserExtendMutation) ResetSystemVersion() {
	m.system_version = nil
}

// SetAdid sets the "adid" field.
func (m *UserExtendMutation) SetAdid(s string) {
	m.adid = &s
}

// Adid returns the value of the "adid" field in the mutation.
func (m *UserExtendMutation) Adid() (r string, exists bool) {
	v := m.adid
	if v == nil {
		return
	}
	return *v, true
}

// OldAdid returns the old "adid" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldAdid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdid: %w", err)
	}
	return oldValue.Adid, nil
}

// ResetAdid resets all changes to the "adid" field.
func (m *UserExtendMutation) ResetAdid() {
	m.adid = nil
}

// SetGameID sets the "game_id" field.
func (m *UserExtendMutation) SetGameID(s string) {
	m.game_id = &s
}

// GameID returns the value of the "game_id" field in the mutation.
func (m *UserExtendMutation) GameID() (r string, exists bool) {
	v := m.game_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGameID returns the old "game_id" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldGameID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGameID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGameID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameID: %w", err)
	}
	return oldValue.GameID, nil
}

// ResetGameID resets all changes to the "game_id" field.
func (m *UserExtendMutation) ResetGameID() {
	m.game_id = nil
}

// SetThirdPlatformID sets the "third_platform_id" field.
func (m *UserExtendMutation) SetThirdPlatformID(i int8) {
	m.third_platform_id = &i
	m.addthird_platform_id = nil
}

// ThirdPlatformID returns the value of the "third_platform_id" field in the mutation.
func (m *UserExtendMutation) ThirdPlatformID() (r int8, exists bool) {
	v := m.third_platform_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdPlatformID returns the old "third_platform_id" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldThirdPlatformID(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThirdPlatformID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThirdPlatformID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdPlatformID: %w", err)
	}
	return oldValue.ThirdPlatformID, nil
}

// AddThirdPlatformID adds i to the "third_platform_id" field.
func (m *UserExtendMutation) AddThirdPlatformID(i int8) {
	if m.addthird_platform_id != nil {
		*m.addthird_platform_id += i
	} else {
		m.addthird_platform_id = &i
	}
}

// AddedThirdPlatformID returns the value that was added to the "third_platform_id" field in this mutation.
func (m *UserExtendMutation) AddedThirdPlatformID() (r int8, exists bool) {
	v := m.addthird_platform_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetThirdPlatformID resets all changes to the "third_platform_id" field.
func (m *UserExtendMutation) ResetThirdPlatformID() {
	m.third_platform_id = nil
	m.addthird_platform_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserExtendMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserExtendMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserExtendMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserExtendMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserExtendMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserExtend entity.
// If the UserExtend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserExtendMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserExtendMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Op returns the operation name.
func (m *UserExtendMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserExtend).
func (m *UserExtendMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserExtendMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.plat_user_id != nil {
		fields = append(fields, userextend.FieldPlatUserID)
	}
	if m.real_name != nil {
		fields = append(fields, userextend.FieldRealName)
	}
	if m.id_number != nil {
		fields = append(fields, userextend.FieldIDNumber)
	}
	if m.age != nil {
		fields = append(fields, userextend.FieldAge)
	}
	if m.sex != nil {
		fields = append(fields, userextend.FieldSex)
	}
	if m.birth != nil {
		fields = append(fields, userextend.FieldBirth)
	}
	if m.icon != nil {
		fields = append(fields, userextend.FieldIcon)
	}
	if m.nick_name != nil {
		fields = append(fields, userextend.FieldNickName)
	}
	if m.imei != nil {
		fields = append(fields, userextend.FieldImei)
	}
	if m.oaid != nil {
		fields = append(fields, userextend.FieldOaid)
	}
	if m.device_id != nil {
		fields = append(fields, userextend.FieldDeviceID)
	}
	if m.system_name != nil {
		fields = append(fields, userextend.FieldSystemName)
	}
	if m.system_version != nil {
		fields = append(fields, userextend.FieldSystemVersion)
	}
	if m.adid != nil {
		fields = append(fields, userextend.FieldAdid)
	}
	if m.game_id != nil {
		fields = append(fields, userextend.FieldGameID)
	}
	if m.third_platform_id != nil {
		fields = append(fields, userextend.FieldThirdPlatformID)
	}
	if m.created_at != nil {
		fields = append(fields, userextend.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userextend.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserExtendMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userextend.FieldPlatUserID:
		return m.PlatUserID()
	case userextend.FieldRealName:
		return m.RealName()
	case userextend.FieldIDNumber:
		return m.IDNumber()
	case userextend.FieldAge:
		return m.Age()
	case userextend.FieldSex:
		return m.Sex()
	case userextend.FieldBirth:
		return m.Birth()
	case userextend.FieldIcon:
		return m.Icon()
	case userextend.FieldNickName:
		return m.NickName()
	case userextend.FieldImei:
		return m.Imei()
	case userextend.FieldOaid:
		return m.Oaid()
	case userextend.FieldDeviceID:
		return m.DeviceID()
	case userextend.FieldSystemName:
		return m.SystemName()
	case userextend.FieldSystemVersion:
		return m.SystemVersion()
	case userextend.FieldAdid:
		return m.Adid()
	case userextend.FieldGameID:
		return m.GameID()
	case userextend.FieldThirdPlatformID:
		return m.ThirdPlatformID()
	case userextend.FieldCreatedAt:
		return m.CreatedAt()
	case userextend.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserExtendMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userextend.FieldPlatUserID:
		return m.OldPlatUserID(ctx)
	case userextend.FieldRealName:
		return m.OldRealName(ctx)
	case userextend.FieldIDNumber:
		return m.OldIDNumber(ctx)
	case userextend.FieldAge:
		return m.OldAge(ctx)
	case userextend.FieldSex:
		return m.OldSex(ctx)
	case userextend.FieldBirth:
		return m.OldBirth(ctx)
	case userextend.FieldIcon:
		return m.OldIcon(ctx)
	case userextend.FieldNickName:
		return m.OldNickName(ctx)
	case userextend.FieldImei:
		return m.OldImei(ctx)
	case userextend.FieldOaid:
		return m.OldOaid(ctx)
	case userextend.FieldDeviceID:
		return m.OldDeviceID(ctx)
	case userextend.FieldSystemName:
		return m.OldSystemName(ctx)
	case userextend.FieldSystemVersion:
		return m.OldSystemVersion(ctx)
	case userextend.FieldAdid:
		return m.OldAdid(ctx)
	case userextend.FieldGameID:
		return m.OldGameID(ctx)
	case userextend.FieldThirdPlatformID:
		return m.OldThirdPlatformID(ctx)
	case userextend.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userextend.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserExtend field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserExtendMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userextend.FieldPlatUserID:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatUserID(v)
		return nil
	case userextend.FieldRealName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealName(v)
		return nil
	case userextend.FieldIDNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDNumber(v)
		return nil
	case userextend.FieldAge:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case userextend.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case userextend.FieldBirth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirth(v)
		return nil
	case userextend.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case userextend.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case userextend.FieldImei:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImei(v)
		return nil
	case userextend.FieldOaid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOaid(v)
		return nil
	case userextend.FieldDeviceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceID(v)
		return nil
	case userextend.FieldSystemName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemName(v)
		return nil
	case userextend.FieldSystemVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemVersion(v)
		return nil
	case userextend.FieldAdid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdid(v)
		return nil
	case userextend.FieldGameID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameID(v)
		return nil
	case userextend.FieldThirdPlatformID:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdPlatformID(v)
		return nil
	case userextend.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userextend.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserExtend field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserExtendMutation) AddedFields() []string {
	var fields []string
	if m.addplat_user_id != nil {
		fields = append(fields, userextend.FieldPlatUserID)
	}
	if m.addage != nil {
		fields = append(fields, userextend.FieldAge)
	}
	if m.addsex != nil {
		fields = append(fields, userextend.FieldSex)
	}
	if m.addbirth != nil {
		fields = append(fields, userextend.FieldBirth)
	}
	if m.addthird_platform_id != nil {
		fields = append(fields, userextend.FieldThirdPlatformID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserExtendMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userextend.FieldPlatUserID:
		return m.AddedPlatUserID()
	case userextend.FieldAge:
		return m.AddedAge()
	case userextend.FieldSex:
		return m.AddedSex()
	case userextend.FieldBirth:
		return m.AddedBirth()
	case userextend.FieldThirdPlatformID:
		return m.AddedThirdPlatformID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserExtendMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userextend.FieldPlatUserID:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlatUserID(v)
		return nil
	case userextend.FieldAge:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case userextend.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSex(v)
		return nil
	case userextend.FieldBirth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBirth(v)
		return nil
	case userextend.FieldThirdPlatformID:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThirdPlatformID(v)
		return nil
	}
	return fmt.Errorf("unknown UserExtend numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserExtendMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserExtendMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserExtendMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserExtend nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserExtendMutation) ResetField(name string) error {
	switch name {
	case userextend.FieldPlatUserID:
		m.ResetPlatUserID()
		return nil
	case userextend.FieldRealName:
		m.ResetRealName()
		return nil
	case userextend.FieldIDNumber:
		m.ResetIDNumber()
		return nil
	case userextend.FieldAge:
		m.ResetAge()
		return nil
	case userextend.FieldSex:
		m.ResetSex()
		return nil
	case userextend.FieldBirth:
		m.ResetBirth()
		return nil
	case userextend.FieldIcon:
		m.ResetIcon()
		return nil
	case userextend.FieldNickName:
		m.ResetNickName()
		return nil
	case userextend.FieldImei:
		m.ResetImei()
		return nil
	case userextend.FieldOaid:
		m.ResetOaid()
		return nil
	case userextend.FieldDeviceID:
		m.ResetDeviceID()
		return nil
	case userextend.FieldSystemName:
		m.ResetSystemName()
		return nil
	case userextend.FieldSystemVersion:
		m.ResetSystemVersion()
		return nil
	case userextend.FieldAdid:
		m.ResetAdid()
		return nil
	case userextend.FieldGameID:
		m.ResetGameID()
		return nil
	case userextend.FieldThirdPlatformID:
		m.ResetThirdPlatformID()
		return nil
	case userextend.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userextend.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserExtend field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserExtendMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserExtendMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserExtendMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserExtendMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserExtendMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserExtendMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserExtendMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserExtend unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserExtendMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserExtend edge %s", name)
}
