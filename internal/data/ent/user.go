// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"user/internal/data/ent/user"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// TelNum holds the value of the "tel_num" field.
	TelNum string `json:"tel_num,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// PasswordStr holds the value of the "password_str" field.
	PasswordStr string `json:"password_str,omitempty"`
	// RegType holds the value of the "reg_type" field.
	RegType int8 `json:"reg_type,omitempty"`
	// RegisterTime holds the value of the "register_time" field.
	RegisterTime time.Time `json:"register_time,omitempty"`
	// RegisterIP holds the value of the "register_ip" field.
	RegisterIP int `json:"register_ip,omitempty"`
	// TelStatus holds the value of the "tel_status" field.
	TelStatus int8 `json:"tel_status,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldRegType, user.FieldRegisterIP, user.FieldTelStatus, user.FieldStatus:
			values[i] = new(sql.NullInt64)
		case user.FieldUserName, user.FieldEmail, user.FieldTelNum, user.FieldPassword, user.FieldPasswordStr:
			values[i] = new(sql.NullString)
		case user.FieldRegisterTime, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldTelNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel_num", values[i])
			} else if value.Valid {
				u.TelNum = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldPasswordStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_str", values[i])
			} else if value.Valid {
				u.PasswordStr = value.String
			}
		case user.FieldRegType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reg_type", values[i])
			} else if value.Valid {
				u.RegType = int8(value.Int64)
			}
		case user.FieldRegisterTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field register_time", values[i])
			} else if value.Valid {
				u.RegisterTime = value.Time
			}
		case user.FieldRegisterIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field register_ip", values[i])
			} else if value.Valid {
				u.RegisterIP = int(value.Int64)
			}
		case user.FieldTelStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tel_status", values[i])
			} else if value.Valid {
				u.TelStatus = int8(value.Int64)
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = int8(value.Int64)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", user_name=")
	builder.WriteString(u.UserName)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", tel_num=")
	builder.WriteString(u.TelNum)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", password_str=")
	builder.WriteString(u.PasswordStr)
	builder.WriteString(", reg_type=")
	builder.WriteString(fmt.Sprintf("%v", u.RegType))
	builder.WriteString(", register_time=")
	builder.WriteString(u.RegisterTime.Format(time.ANSIC))
	builder.WriteString(", register_ip=")
	builder.WriteString(fmt.Sprintf("%v", u.RegisterIP))
	builder.WriteString(", tel_status=")
	builder.WriteString(fmt.Sprintf("%v", u.TelStatus))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
